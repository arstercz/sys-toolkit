#!/usr/bin/env perl

=head1 NAME

sys-checkport - check a host port is wether opened or not.

=cut

=head1 SYNOPSIS

    use sys-memcached-summary --help for more info.

    options:
       host|H :  host address, default is 127.0.0.1.
       port|p :  port number, must be specified.
       type|t :  memcached or redis, default is redis.
       help|h :  print help info.
       verbose|v :  print source source ip address and port.

=cut

use strict;
use warnings;
use IO::Socket::INET;
use Data::Dumper;
use Getopt::Long;

my $host = '127.0.0.1';
my $port;
my $type = "redis";
my $verbose;
my $help;

GetOptions(
    "host|H=s"   => \$host,
    "port|p=i"   => \$port,
    "type|t=s"   => \$type,
    "help|h!"      => \$help,
    "verbose|v!" => \$verbose,
);

if ($help) {
    usage($0);
}

sub usage {
    my $name = shift;
    system("perldoc $name");
    exit 0;
}

unless (( $type eq 'memcached' || $type eq 'redis' )) {
    print "unknown type: $type, memcached or redis\n";
    exit 1;
}

unless ($port) {
    print "no port number. use --help for more info\n";
    exit 1;
}

# memcached and redis commands
my %commands = (
   "memcached" => "stats\nstats slabs\nstats items\nstats sizes\nquit\n",
   "redis"     => "info\r\nquit\r\n",
);

$| = 1;
my $fail   = 0;
my $socket = IO::Socket::INET->new(
    PeerAddr => $host,
    PeerPort => $port,
    Proto    => "tcp",
    Timeout  => 2
) or die "unable to connect $host:$port\n";

$socket->autoflush(1);
my $pid;

die "can't fork: $!" unless defined($pid = fork());
if ($pid) {
    print STDERR "Connected to $host:$port\n";
}
else {
    print $socket "$commands{$type}";
    while(<$socket>) {
        # http://redis.io/topics/protocol
        next if /^(?:\+|\-|\:|\$|\*)/;
        chomp && print $_ . "\n";
    }
}

exit;

=head1 AUTHOR

zhe.chen <chenzhe07@gmail.com>

=head1 CHANGELOG

v0.1.0 version

=cut
