#!/usr/bin/env perl

=head1 NAME

sys-daemon - run script with daemonize way.

=head1 SYNOPSIS

Usage: [OPTION...]

=head1 RISKS

..

=cut

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use English '-no_match_vars';
use POSIX qw(strftime);
use Data::Dumper;

my $pid_file;
my $log_file;
my $parent_exit = 1;
my $help        = 0;
my $verbose     = 0;

GetOptions(
    "pid_file|p=s" => \$pid_file,
    "log_file|o=s" => \$log_file,
    "parent|l!"    => \$parent_exit,
    "verbose|v!"   => \$verbose,
    "help!"        => \$help,
) or die "option error: $!";

if ($help) {
    usage($0);
}

sub usage {
    my $name = shift;
    system("perldoc $name");
    exit 0;
}

unless ($pid_file) {
    print "pid_file must be specified!\n";
    exit 1;
}

exit Daemon->new(
    pid_file    => $pid_file,
    log_file    => $log_file,
    parent_exit => $parent_exit,
)->run(@ARGV);


# ###################################################################
# Documentation.
# ###################################################################

=head1 OPTIONS

=over 4

=item pid_file | p

Causes  daemonize  to write the numeric process ID (PID) of the running daemon 
to the specified file. This option is useful when the program being daemonized
doesn't create its own PID file.

=item log_file | o

Redirect standard output to the specified file, instead of "/dev/null".

=item parent | l

Whether exit parent process when start daemon, default is yes.

=item verbose|v

print verbose info.

=item help

print help info.

=back

=head1 AUTHOR

zhe.chen <chenzhe07@gmail.com>

=head1 CHANGELOG

v0.1.0 version

=cut

package Daemon;
# fork from percona-toolkit
use strict;
use warnings FATAL => 'all';
use English qw(-no_match_vars);

use POSIX qw(setsid);
use Fcntl qw(:DEFAULT);

sub new {
    my ($class, %args) = @_;
    my $self = {
        log_file         => $args{log_file},
        pid_file         => $args{pid_file},
        parent_exit      => $args{parent_exit},
        pid_file_owner   => 0,
    };
    bless $self, $class;
    return $self;
}

sub exec_command {
    my $prog = shift @_;
    unless (-x $prog) {
        die "cannot find $prog or has no execute privileges";
    }
    exec ($prog, @_)
        or die "Failed to exec $prog "
               . join(" ", @_) . ": $!";
}

sub run {
    my $self = shift @_;

    # Just for brevity
    my $pid_file         = $self->{pid_file};
    my $log_file         = $self->{log_file};
    my $parent_exit      = $self->{parent_exit};

    if ($pid_file) {
        eval {
            $self->_make_pid_file(
                pid      => $PID, # parent's pid, see perlvar
                pid_file => $pid_file,
            );
        };
        die "$EVAL_ERROR\n" if $EVAL_ERROR;
    }
    
    # start fork, exit parent, continue as child process.
    defined (my $child_pid = fork()) or die "Cannot fork: $OS_ERROR";
    if ($child_pid) {
        # I'm the parent.
        exit 0;
    }

    # I'm the child.
    POSIX::setsid() or die "Cannot start a new session: $OS_ERROR";
    chdir '/' or die "Cannot chdir to /;: $OS_ERROR";

    if ($pid_file) {
        $self->_update_pid_file(
            pid      => $PID, # child's pid
            pid_file => $pid_file,
        );
        $self->{pid_file_owner} = $PID;
    }

    if ($log_file) {
        close STDIN;
        open STDIN, '/dev/null'
             or die "Cannot reopen STDIN to /dev/null: $OS_ERROR";
        close STDOUT;
        open STDOUT, '>>', $log_file
             or die "Cannot open log file $log_file: $OS_ERROR";

        close STDERR;
        open STDERR, ">&STDOUT"
             or die "Cannot dupe STDERR to STDOUT: $OS_ERROR";;
    }
    else {
        if (-t STDOUT) {
            close STDOUT;
            open STDOUT, '>', '/dev/null'
                or die "Cannot reopen STDOUT to /dev/null: $OS_ERROR";

        }

        if (-t STDERR) {
            close STDERR;
            open STDERR, '>', '/dev/null'
                or die "Cannot reopen STDERR to /dev/null: $OS_ERROR";
        }
    }

    $OUTPUT_AUTOFLUSH = 1;

    exec_command(@_);

    return;
}

sub _make_pid_file {
    my ($self, %args) = @_;
    my @required_args = qw(pid pid_file);
    foreach my $arg (@required_args) {
        die "I need a $arg argument" unless $args{$arg};
    }

    my $pid       = $args{pid};
    my $pid_file  = $args{pid_file};

    eval {
        sysopen(PID_FH, $pid_file, O_RDWR|O_CREAT|O_EXCL) or die $OS_ERROR;
        print PID_FH $PID, "\n"; # parent pid
        close PID_FH;
    };
    if (my $e = $EVAL_ERROR) {
        if ($e =~ m/file exists/i) {
            my $old_pid = $self->_check_pid_file(
                pid_file => $pid_file,
                pid      => $PID,
            );
            if ($old_pid) {
                warn "Overwritting PID file $pid_file because PID $old_pid "
                     . "is not running.\n";
            }
            $self->_update_pid_file(
                pid      => $PID,
                pid_file => $pid_file,
            );
        }
        else {
            die "Error createing PID file $pid_file: $e\n";
        }
    }
    return;
}

sub _check_pid_file {
    my ($self, %args) = @_;
    foreach my $arg (qw(pid pid_file)) {
        die "I need a $arg argument" unless $args{$arg};
    }

    my $pid_file = $args{pid_file};
    my $pid      = $args{pid};

    if (! -f $pid_file) {
        return;
    }

    open my $fh, '<', $pid_file
         or die "Error opening $pid_file: $OS_ERROR";
     my $existing_pid = do {local $/; <$fh> };
     chomp($existing_pid) if $existing_pid;
     close $fh or die "Error closing $pid_file: $OS_ERROR";

     if ($existing_pid) {
        if ($existing_pid == $pid) {
            warn "The Current PID $pid already holds the PID file $pid_file\n";
            return;
        }
        else {
            my $pid_is_alive = kill 0, $existing_pid;
            if ($pid_is_alive) {
                die "PID file $pid_file exists and PID $existing_pid is running\n";
            }
        }
     }
     else {
        die "PID file $pid_file exists but it's empty. remove the file "
            . "if the process is no longer running.\n";
     }
     return $existing_pid;
}

sub _update_pid_file {
    my ($self, %args) = @_;
    foreach my $arg ( qw(pid pid_file) ) {
        die "I need a $arg argument" unless $args{$arg};
    }

    my $pid      = $args{pid};
    my $pid_file = $args{pid_file};

    open my $fh, '>', $pid_file
        or die "Cannot print to $pid_file: $OS_ERROR";
    
    print $fh $pid, "\n"
        or die "Cannot print to $pid_file: $OS_ERROR";

    close $fh
        or warn "Cannot close $pid_file: $OS_ERROR";

    return;
}

sub remove_pid_file {
    my ($self, $pid_file) = @_;
    $pid_file ||= $self->{pid_file};
    if ($pid_file && -f $pid_file) {
        unlink $self->{pid_file}
            or warn "Cannot remove PID file $pid_file: $OS_ERROR";
    }
    return;
}

sub DESTROY {
    my $self = shift @_;
    if ($self->{pid_file_owner} == $PID) {
        $self->remove_pid_file();
    }
    return;
}

1;
