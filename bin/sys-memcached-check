#!/usr/bin/env perl

=head1 NAME

memcached-check - check memcached whether is alive or not

=cut

=head1 SYNOPSIS

    use sys-memcached-summary --help for more info.

    options:
       host|h:  host address, default is 127.0.0.1.
       port|p:  port number, default is 11211.
       help  :  print help info.
       verbose|v :  print source source ip address and port.

=cut

use strict;
use warnings;
use IO::Socket::INET;
use IO::Socket::INET6;
use Getopt::Long qw(:config no_ignore_case);

my $host = '127.0.0.1';
my $port = 11211;
my $verbose;
my $ipv6;
my $help;

GetOptions(
    "host|h=s"   => \$host,
    "port|p=i"   => \$port,
    "ipv6|6!"    => \$ipv6,
    "help!"      => \$help,
    "verbose|v!" => \$verbose,
);

if ($help) {
    usage($0);
}

sub usage {
    my $name = shift;
    system("perldoc $name");
    exit 0;
}

unless ($port) {
    print "no port number. use --help for more info\n";
    exit 1;
}

# memcached and redis commands
my %commands = (
   "check" => "set memcached-check 0 0 1\r\n1\r\nget memcached-check\r\nquit\r\n",
   #"get" => "get memcached-check\r\nquit\r\n",
);

$| = 1;
my $fail   = 0;
my $socket;

if ($ipv6) {
    $socket = IO::Socket::INET6->new(
        PeerAddr => $host,
        PeerPort => $port,
        Proto    => "tcp",
        Timeout  => 1
    ) or die "unable to connect $host:$port\n";
}
else {
    $socket = IO::Socket::INET->new(
        PeerAddr => $host,
        PeerPort => $port,
        Proto    => "tcp",
        Timeout  => 1
    ) or die "unable to connect $host:$port\n";
}

$socket->autoflush(1);

my $v;
my $t;
# check command
print $socket "$commands{check}";
while(<$socket>) {
    print if $verbose;
    last if /^END/;
    chomp;
    $t = 1 if /VALUE memcached-check/;
    $v = $_ if /^\d/;
}

if ($t && $v) {
  print "memcached $host:$port check ok!\n";
  exit 0;
}
else {
  print "memcached $host:$port check error!\n";
  exit 124;  
}

=head1 AUTHOR

zhe.chen <chenzhe07@gmail.com>

=head1 CHANGELOG

v0.1.0 version

=cut
