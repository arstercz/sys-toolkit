#!/usr/bin/env perl
=head1 NAME

sys-kill-close-wait - kill the tcp close_wait state connections 
without restart server program.

=cut

=head1 SYNOPSIS

   Send tcp ack packets using raw sockets to kill close_wait state connection.
   use sys-kill-close-wait --help for more info

   options:
     --src_host : source ip address.
     --src_port : source port number.
     --dst_host : destination ip address.
     --dst_port : destination port number.
     --help|h   : print help message.
      
   FYI: http://www.binarytides.com/perl-syn-flood-program-raw-sockets-linux/

=cut
 
use strict;
use warnings;
use Socket;
use Getopt::Long;
 
my $src_host; #source ip/hostname
my $src_port; #Source port
my $dst_host; #destination ip/Hostname
my $dst_port; #destination port.
my $help;

GetOptions(
   "src_host=s"   => \$src_host,
   "src_port=i"   => \$src_port,
   "dst_host=s"   => \$dst_host,
   "dst_port=i"   => \$dst_port,
   "help|h!"      => \$help,
);
 
if ($help) {
   usage($0)
}

sub usage {
   my $name = shift;
   system("perldoc $name");
   exit 0;
}

if (!defined $src_host or !defined $src_port or !defined $dst_host 
      or !defined $dst_port) 
{
    print "Usage: $0 "
    . "--src_host <source host> --src_port <source port> "
	. "--dst_host <dest host> --dst_port <dest port>\n";
    exit 1;
} 

#Function to calculate checksum - used in both ip and tcp headers
sub checksum 
{
    # This of course is a blatent rip from _the_ GOD,
    # W. Richard Stevens.
 
    my ($msg) = @_;
    my ($len_msg,$num_short,$short,$chk);
    $len_msg = length($msg);
    $num_short = $len_msg / 2;
    $chk = 0;
     
    foreach $short (unpack("S$num_short", $msg)) 
    {
        $chk += $short;
    }
     
    $chk += unpack("C", substr($msg, $len_msg - 1, 1)) if $len_msg % 2;
    $chk = ($chk >> 16) + ($chk & 0xffff);
     
    return(~(($chk >> 16) + $chk) & 0xffff);
}

#make the fake ip header.
sub makeheaders 
{
    my $IPPROTO_TCP = 6;
    my ($src_host , $src_port , $dst_host , $dst_port) = @_;
     
    my $zero_cksum = 0;
 
    # Lets construct the TCP half
    my $tcp_len = 20;
    my $seq = 10; # random num in 0 ~ 2^32 - 1, need checksum function to check.
    my $seq_ack = 0;
     
    my $tcp_doff = "5"; # data offset
    my $tcp_res = 0;
    my $tcp_doff_res = $tcp_doff . $tcp_res;
     
    # Flag bits
    my $tcp_urg = 0; 
    my $tcp_ack = 1;
    my $tcp_psh = 0;
    my $tcp_rst = 0;
    my $tcp_syn = 0;
    my $tcp_fin = 0;
    my $null = 0;
     
    my $tcp_win = 124;
     
    my $tcp_urg_ptr = 44;
    my $tcp_flags = $null . $null . $tcp_urg . $tcp_ack . $tcp_psh . $tcp_rst . $tcp_syn . $tcp_fin ;
     
    my $tcp_check = 0;
     
    #create tcp header with checksum = 0
    my $tcp_header = pack('nnNNH2B8nvn' , $src_port , $dst_port , $seq, $seq_ack , $tcp_doff_res, $tcp_flags,  $tcp_win , $tcp_check, $tcp_urg_ptr);
     
	# tcp pseudo-header for checksum computation(IPv4)
	# https://tools.ietf.org/html/rfc793  - page 17
	my $tcp_pseudo = pack('a4a4CCn' , $src_host, $dst_host, 0, $IPPROTO_TCP, length($tcp_header) ) . $tcp_header;
	$tcp_check = &checksum($tcp_pseudo);
     
    #create tcp header with checksum
	$tcp_header = pack('nnNNH2B8nvn' , $src_port , $dst_port , $seq, $seq_ack , $tcp_doff_res, $tcp_flags,  $tcp_win , $tcp_check, $tcp_urg_ptr);
     
    # Now lets construct the IP packet
    my $ip_ver = 4;
    my $ip_len = 5;
    my $ip_ver_len = $ip_ver . $ip_len;
     
    my $ip_tos = 00;
    my $ip_tot_len = $tcp_len + 20;
    my $ip_frag_id = 19245;
    my $ip_ttl = 32;
    my $ip_proto = $IPPROTO_TCP;    # 6 for tcp
    my $ip_frag_flag = "010";
    my $ip_frag_oset = "0000000000000";
    my $ip_fl_fr = $ip_frag_flag . $ip_frag_oset;
     
    # ip header
    # src and destination should be a4 and a4 since they are already in network byte order
    my $ip_header = pack('H2CnnB16CCna4a4', $ip_ver_len, $ip_tos, $ip_tot_len, $ip_frag_id, $ip_fl_fr , $ip_ttl , $ip_proto , $zero_cksum , $src_host , $dst_host);
     
    # final packet
    my $pkt = $ip_header . $tcp_header;
     
    # packet is ready
    return $pkt;
}

print "kill close_wait connection $src_host:$src_port => $dst_host:$dst_port\n";
my $src_host_n = (gethostbyname($src_host))[4];
my $dst_host_n = (gethostbyname($dst_host))[4];
 
# when IPPROTO_RAW is used IP_HDRINCL is not needed
my $IPROTO_RAW = 255;
my $sock;
socket($sock , AF_INET, SOCK_RAW, $IPROTO_RAW) or die $!;
 
my ($packet) = makeheaders($src_host_n, $src_port, $dst_host_n, $dst_port);
my ($destination) = pack('Sna4x8', AF_INET, $dst_port, $dst_host);
 
eval {
    send($sock , $packet , 0 , $destination);
};
if($@) {
    warn "error: $@";
}
else {
    print "send ack ok!\n"; 
	exit 0;
}

=head1 AUTHOR

zhe.chen <chenzhe07@gmail.com>

=head1 CHANGELOG

v0.1.0 version

=cut
