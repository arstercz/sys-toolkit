#!/bin/bash
# Output the ip or host of the /etc/hosts 
# zhe.chen<chenzhe07@gmail.com>

exec 2>&1

if [ $# -ne 1 ]; then
   echo "Usage: sys-hosts-list [ip|host]"
   exit 1;
fi

export TAG_HOST=$1

if [[ $TAG_HOST != "ip" && $TAG_HOST != "host" ]]; then
    echo "option must be ip or host"
	exit 1;
fi

HOSTS="/etc/hosts"
if [ ! -e $HOSTS ]; then
   echo "$HOSTS does not exists."
   exit 1
fi

cat /etc/hosts | perl -ne '
   use Data::Dumper;
   BEGIN {
       my %all_hash = ();
	   sub remove_dup_array {
	       my %count;
		   return grep { ++$count{$_} < 2 } @_;
	   }
   };

   chomp;
   if( /^$/ || /^\s*#/ ) {
      next;
   }
   $_ =~ s/([^#].*?)\s*#.*$/$1/g;

   my @list=split(/\s+/, $_, 2); #split to 2 columns
   
   my @name = split(/\s+/, $list[1]);
   if ( @{$all_hash{$list[0]}} + 0 > 0 ) {
       push @{$all_hash{$list[0]}}, @name;
   }
   else {
       $all_hash{$list[0]} = [ @name ]; 
   }

   END{
       $| = 1;
       if ( $ENV{TAG_HOST} eq "ip" ) {
           for my $ip ( sort keys %all_hash ) {
               print " " x 3 . $ip . "\n";   
           } 
       }
   
       if ( $ENV{TAG_HOST} eq "host" ) {
           my @host_info;
	       for my $host ( sort { $a <=> $b } values %all_hash ) {
               foreach (@$host) {
                   push @host_info, $_;
               }
           }
           print " " x 3 . 
              join("\n" . " " x 3, sort(remove_dup_array(@host_info))) . "\n";
       }
   };
   
   '

# Documentation
: <<'DOCUMENTATION'
=pod

=head1 NAME

sys-hosts-list - Output the ip or host for the file: /etc/hosts

=head1 SYNOPSIS

  Usage: sys-hosts-list [ip/host]
  
  eg:
     # output ip list
     ./sys-hosts-list ip
        10.3.254.2
        10.3.254.3
        127.0.0.1
        ::1

     # output host list
     ./sys-hosts-list host
        localhost
        localhost.localdomain
        localhost4
        z2.com
        z3

=head1 AUTHOR

chenzhe07@gmail.com

=head1 VERSION

sys-hosts-list 0.1.0

=cut

DOCUMENTATION
