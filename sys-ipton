#!/usr/bin/env perl

=head1 NAME

sys-ipton - Transformation of ipv4 to/from number

=cut

=head1 SYNOPSIS

    use sys-ipton --help for more info.

    options:
       ip|i     :ipv4 address, will be convert to number.
       number|n :number that will be convert to ipv4 .
       help     :print help info.

=cut

use strict;
use warnings;
use Getopt::Long;

my $ip;
my $number;
my $help;

GetOptions(
    "ip|p=s"     => \$ip,
    "number|n=i" => \$number,
    "help!"      => \$help,
);

if ($help) {
    usage($0);
}

sub usage {
    my $name = shift;
    system("perldoc $name");
    exit 0;
}

if ( (defined $ip & defined $number) == 1 ) {
    print "both ipv4 address and number is not allowed\n";
    exit 1;
}
elsif ( (defined $ip | defined $number) == 0 ) {
    print "either ipv4 or number should be specified.\n";
    exit 1;
}
else{
}

if ( defined $ip ) {
    # check ipve4 is available
    my $ip_re = qr/[0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]/;
    unless( $ip =~ /^$ip_re\.$ip_re\.$ip_re\.$ip_re$/ ) {
       print "$ip is not avalid ipv4 address\n";
       exit 1;
    }

    #print unpack("N", inet_aton($ip)) . "\n";
    my $i = 3;
    my $n = 0;
    for ($ip =~ /(\d+)(?:\.|$)/g) {
       $n += ($_ << (8*$i--)) 
    }

    print "ipv4 $ip convert to : " . $n . "\n";
}

if ( defined $number ) {
    # check number is avalid.
    unless ( $number >= 0 && $number <= 4294967295 ) {
       print "$number out of the ipv4 number range.\n";
       exit 1;
    }

    print  "$number convert to: "
           . join(".", map{ ( ($number>>8*($_))&0xFF ) } reverse 0 .. 3)
           . "\n";
}

=head1 AUTHOR

zhe.chen <chenzhe07@gmail.com>

=head1 CHANGELOG

v0.1.0 version

=cut
